package anhtester;

import org.testng.annotations.Test;
import static org.testng.AssertJUnit.assertEquals;

public class bai1 {
    // 1. Kiểm tra phép nhân
    public int multiply(int a, int b) {
        return a * b;
    }
    @Test
    public void multiply(){
        assertEquals(20, multiply(4, 5));
        assertEquals(0, multiply(0, 100));
        assertEquals(-15, multiply(-3, 5));
        assertEquals(25, multiply(-5, -5));
        assertEquals(1, multiply(1, 1));
        assertEquals(-1, multiply(1, -1));
        assertEquals(1000000, multiply(1000, 1000));
        assertEquals(0, multiply(0, 0));
        assertEquals(Integer.MAX_VALUE, multiply(Integer.MAX_VALUE, 1));
        assertEquals(Integer.MIN_VALUE, multiply(Integer.MIN_VALUE, 1));
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class bai2 {
    // 2. Kiểm tra phép chia
    public int divide(int a, int b) {
        return a / b;
    }

    @Test(expectedExceptions = ArithmeticException.class)
    public void testDivideByZero() {
        divide(10, 0);
    }

    @Test
    public void testDivide() {
        assertEquals(2, divide(10, 5));
        assertEquals(0, divide(0, 5));
        assertEquals(-2, divide(-10, 5));
        assertEquals(1, divide(-5, -5));
        assertEquals(0, divide(1, 3));
        assertEquals(Integer.MAX_VALUE, divide(Integer.MAX_VALUE, 1));
        assertEquals(0, divide(1, Integer.MAX_VALUE));
        assertEquals(-1, divide(Integer.MIN_VALUE, Integer.MAX_VALUE));
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class bai3 {
    // 3. Tính trung bình cộng
    public double average(List<Integer> numbers) {
        if (numbers.isEmpty()) throw new ArithmeticException("List is empty");
        return numbers.stream().mapToInt(Integer::intValue).average().orElse(0);
    }

    @Test(expectedExceptions = ArithmeticException.class)
    public void testAverageEmptyList() {
        average(Arrays.asList());
    }

    @Test
    public void testAverage() {
        assertEquals(3.0, average(Arrays.asList(1, 2, 3, 4, 5)), 0.001);
        assertEquals(5.0, average(Arrays.asList(5, 5, 5, 5)), 0.001);
        assertEquals(-2.0, average(Arrays.asList(-4, 0)), 0.001);
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class bai4 {
    // 4. Hàm lấy phần tử theo chỉ mục

    public int getElementAtIndex(int[] array, int index) {
        return array[index];
    }


    @Test
    public void testGetElementAtIndexOutOfBounds() {
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            getElementAtIndex(new int[]{1, 2, 3}, 5);
        });
    }


    @Test
    public void testGetElementAtIndex() {
        assertEquals(2, getElementAtIndex(new int[]{1, 2, 3}, 1));  // Kết quả mong đợi là 2
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//5. Check user (Bài này lưu ý k tạo ra user mới ở 1 class riêng thỳ check bằng niềm tin - nếu đúng tên nó sẽ k hiện ra đâu nhé !)

public class User {
    private String name;

    public String getName() {
        if (name == null) throw new NullPointerException("Name is null");
        return name;
    }

	public class UserTest {
    @Test
    void testUserNameNull() {
        User user = new User();
        assertThrows(NullPointerException.class, user::getName);
    }

    @Test
    void testUserName() {
        User user = new User();
        user.setName("Tien Si Nguyen");
        assertEquals("Tien Si Nguyen", user.getName());
    }

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
}


public class bai6 {

    public int findMin(int[] array) {
        if (array.length == 0) throw new IllegalArgumentException("Array is empty");
        int min = array[0];
        for (int num : array) {
            if (num < min) min = num;
        }
        return min;
    }


    @Test
    public void testFindMinEmptyArray() {
        assertThrows(IllegalArgumentException.class, () -> findMin(new int[]{}));
    }

    @Test
    public void testFindMin() {
        assertEquals(1, findMin(new int[]{3, 5, 1, 8, 2}));
        assertEquals(-10, findMin(new int[]{-10, -5, 0, 3}));
        assertEquals(0, findMin(new int[]{0, 0, 0}));
    }
}
